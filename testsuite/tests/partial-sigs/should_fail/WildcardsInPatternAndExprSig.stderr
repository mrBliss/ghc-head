
WildcardsInPatternAndExprSig.hs:4:18:
    Found hole ‘_a’ with type: w_a
    Where: ‘w_a’ is a rigid type variable bound by
                 the inferred type of bar :: Maybe [w_a] -> w_a -> [w_a]
                 at WildcardsInPatternAndExprSig.hs:4:1
    Relevant bindings include
      bar :: Maybe [w_a] -> w_a -> [w_a]
        (bound at WildcardsInPatternAndExprSig.hs:4:1)
    In the type ‘_a’
    In a pattern type signature: _a
    In the pattern: x :: _a

WildcardsInPatternAndExprSig.hs:4:25:
    Found hole ‘_’ with type: [w_a]
    Where: ‘w_a’ is a rigid type variable bound by
                 the inferred type of bar :: Maybe [w_a] -> w_a -> [w_a]
                 at WildcardsInPatternAndExprSig.hs:4:1
    Relevant bindings include
      bar :: Maybe [w_a] -> w_a -> [w_a]
        (bound at WildcardsInPatternAndExprSig.hs:4:1)
    In the type ‘_’
    In a pattern type signature: _
    In the pattern: [x :: _a] :: _

WildcardsInPatternAndExprSig.hs:4:38:
    Found hole ‘_a’ with type: w_a
    Where: ‘w_a’ is a rigid type variable bound by
                 the inferred type of bar :: Maybe [w_a] -> w_a -> [w_a]
                 at WildcardsInPatternAndExprSig.hs:4:1
    Relevant bindings include
      bar :: Maybe [w_a] -> w_a -> [w_a]
        (bound at WildcardsInPatternAndExprSig.hs:4:1)
    In the type ‘Maybe [_a]’
    In a pattern type signature: Maybe [_a]
    In the pattern: Just ([x :: _a] :: _) :: Maybe [_a]

WildcardsInPatternAndExprSig.hs:4:49:
    Found hole ‘_a’ with type: w_a
    Where: ‘w_a’ is a rigid type variable bound by
                 the inferred type of bar :: Maybe [w_a] -> w_a -> [w_a]
                 at WildcardsInPatternAndExprSig.hs:4:1
    Relevant bindings include
      x :: w_a (bound at WildcardsInPatternAndExprSig.hs:4:13)
      bar :: Maybe [w_a] -> w_a -> [w_a]
        (bound at WildcardsInPatternAndExprSig.hs:4:1)
    In the type ‘_a’
    In a pattern type signature: _a
    In the pattern: z :: _a

WildcardsInPatternAndExprSig.hs:4:66:
    Found hole ‘_a’ with type: w_a
    Where: ‘w_a’ is a rigid type variable bound by
                 the inferred type of bar :: Maybe [w_a] -> w_a -> [w_a]
                 at WildcardsInPatternAndExprSig.hs:4:1
    Relevant bindings include
      z :: w_a (bound at WildcardsInPatternAndExprSig.hs:4:44)
      x :: w_a (bound at WildcardsInPatternAndExprSig.hs:4:13)
      bar :: Maybe [w_a] -> w_a -> [w_a]
        (bound at WildcardsInPatternAndExprSig.hs:4:1)
    In an expression type signature: [_a]
    In the expression: [x, z] :: [_a]
    In an equation for ‘bar’:
        bar (Just ([x :: _a] :: _) :: Maybe [_a]) (z :: _a)
          = [x, z] :: [_a]
